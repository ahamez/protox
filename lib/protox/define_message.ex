defmodule Protox.DefineMessage do
  @moduledoc false

  alias Protox.Field

  def define(messages, opts \\ []) do
    keep_unknown_fields = Keyword.get(opts, :keep_unknown_fields, true)

    for {_msg_name, msg = %Protox.Message{}} <- messages do
      sorted_fields = msg.fields |> Map.values() |> Enum.sort(&(&1.tag < &2.tag))

      required_fields = make_required_fields(sorted_fields)
      unknown_fields_name = make_unknown_fields_name(:__uf__, sorted_fields)
      opts = Keyword.put(opts, :unknown_fields_name, unknown_fields_name)

      struct_fields =
        make_struct_fields(sorted_fields, msg.syntax, unknown_fields_name, keep_unknown_fields)

      unknown_fields_funs = make_unknown_fields_funs(unknown_fields_name, keep_unknown_fields)
      required_fields_fun = make_required_fields_fun(required_fields)
      default_fun = make_default_funs(sorted_fields)

      encoder = Protox.DefineEncoder.define(sorted_fields, required_fields, msg.syntax, opts)
      decoder = Protox.DefineDecoder.define(msg.name, sorted_fields, required_fields, opts)

      quote do
        defmodule unquote(msg.name) do
          @moduledoc """
          Code generated by protox. Don't edit.
          """

          defstruct unquote(struct_fields)

          unquote(encoder)
          unquote(decoder)
          unquote(unknown_fields_funs)
          unquote(required_fields_fun)
          unquote(default_fun)

          @spec schema() :: Protox.Message.t()
          def schema(), do: unquote(Macro.escape(msg))
        end
      end
    end
  end

  # -- Private

  defp make_unknown_fields_funs(unknown_fields, true = _keep_unknown_fields) do
    quote do
      @spec unknown_fields(struct()) :: [{non_neg_integer(), Protox.Types.tag(), binary()}]
      def unknown_fields(msg), do: msg.unquote(unknown_fields)

      @spec unknown_fields_name() :: unquote(unknown_fields)
      def unknown_fields_name(), do: unquote(unknown_fields)

      @spec clear_unknown_fields(struct) :: struct
      def clear_unknown_fields(msg), do: struct!(msg, [{unquote(unknown_fields), []}])
    end
  end

  defp make_unknown_fields_funs(_unknown_fields, false = _keep_unknown_fields) do
    []
  end

  # Generate the functions that provide a direct access to the default value of a field.
  defp make_default_funs(fields) do
    spec =
      quote do
        @spec default(atom()) ::
                {:ok, boolean() | integer() | String.t() | float()} | {:error, atom()}
      end

    match_all =
      quote do
        def default(_), do: {:error, :no_such_field}
      end

    ast =
      Enum.map(fields, fn
        %Field{name: name, kind: {:scalar, default}} ->
          quote do
            def default(unquote(name)), do: {:ok, unquote(default)}
          end

        %Field{name: name} ->
          quote do
            def default(unquote(name)), do: {:error, :no_default_value}
          end
      end)

    List.flatten([spec, ast, match_all])
  end

  # Make sure the name chosen for the struct fields that stores the unknow fields
  # of the protobuf message doesn't collide with already existing names.
  defp make_unknown_fields_name(base_name, fields) do
    name_in_fields = Enum.find(fields, fn %Field{name: n} -> n == base_name end)

    if name_in_fields do
      # Append a '_' while there's a collision
      base_name
      |> Atom.to_string()
      |> (fn x -> x <> "_" end).()
      |> String.to_atom()
      |> make_unknown_fields_name(fields)
    else
      base_name
    end
  end

  # Generate fields of the struct which is created for a message.
  defp make_struct_fields(fields, syntax, unknown_fields, keep_unknown_fields) do
    struct_fields =
      for %Field{label: label, name: name, kind: kind} <- fields do
        case kind do
          :map -> {name, Macro.escape(%{})}
          {:oneof, parent} -> make_oneof_field(label, name, parent)
          :packed -> {name, []}
          :unpacked -> {name, []}
          {:scalar, _} when syntax == :proto2 -> {name, nil}
          {:scalar, default_value} when syntax == :proto3 -> {name, default_value}
        end
      end

    struct_fields =
      case keep_unknown_fields do
        true -> struct_fields ++ [{unknown_fields, []}]
        false -> struct_fields
      end

    Enum.uniq(struct_fields)
  end

  defp make_oneof_field(:proto3_optional, name, _), do: {name, nil}
  defp make_oneof_field(_, _, parent), do: {parent, nil}

  # Get the list of fields that are marked as `required`.
  defp make_required_fields(fields) do
    for %Field{label: :required, name: name} <- fields, do: name
  end

  defp make_required_fields_fun(required_fields) do
    required_fields_typesecs = make_required_fields_typespec(required_fields)

    quote do
      @spec required_fields() :: unquote(required_fields_typesecs)
      def required_fields(), do: unquote(required_fields)
    end
  end

  defp make_required_fields_typespec([]), do: quote(do: [])

  defp make_required_fields_typespec(fields) do
    specs =
      Enum.reduce(
        fields,
        fn field, acc ->
          quote(do: unquote(acc) | unquote(field))
        end
      )

    quote(do: [unquote(specs)])
  end
end
