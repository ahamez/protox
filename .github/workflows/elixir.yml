name: Elixir CI

env:
  PROTOBUF_VERSION: '21.4'
  PROTOBUF_LIB_VERSION_MAJOR: '32'
  PROTOBUF_LIB_VERSION_MINOR: '0.4'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MIX_ENV: test

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:

    runs-on: ubuntu-20.04
    name: OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - elixir: 1.9.4
            otp: 22.3
            check_deps: false
            check_format: false
          - elixir: 1.10.4
            otp: 22.3
            check_format: false
          - elixir: 1.11.4
            otp: 23.3
            check_format: false
          - elixir: 1.12.3
            otp: 24.1
          - elixir: 1.13.0
            otp: 24.1
          - elixir: 1.14.1
            check_deps: true
            check_format: true
            otp: 25.1


    steps:
    - uses: actions/checkout@v2

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{matrix.elixir}}
        otp-version: ${{matrix.otp}}

    - name: Restore dependencies cache
      uses: actions/cache@v2
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles('**/mix.lock') }}

    - name: Restore PLT cache
      uses: actions/cache@v2
      with:
        path: priv/plts
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles('**/mix.lock') }}

    - name: Restore conformance-test-runner
      uses: actions/cache@v2
      id: compile-conformance-test-runner
      with:
        path: conformance-bin
        key: ${{ runner.os }}-protobuf-${{ env.PROTOBUF_VERSION }}

    - name: Compile conformance-test-runner
      if: steps.compile-conformance-test-runner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./conformance-bin/.libs
        wget https://github.com/protocolbuffers/protobuf/archive/v${{ env.PROTOBUF_VERSION }}.tar.gz
        tar xf v${{ env.PROTOBUF_VERSION }}.tar.gz
        cd protobuf-${{ env.PROTOBUF_VERSION }}
        ./autogen.sh && ./configure --disable-maintainer-mode --disable-dependency-tracking --disable-static
        make -C ./src protoc
        make -C conformance
        cp ./conformance/.libs/conformance-test-runner ../conformance-bin
        cp ./src/.libs/libprotobuf.so.${{ env.PROTOBUF_LIB_VERSION_MAJOR }}.${{ env.PROTOBUF_LIB_VERSION_MINOR }} ../conformance-bin/.libs/libprotobuf.so.${{ env.PROTOBUF_LIB_VERSION_MAJOR }}

    - name: Install protoc
      run: |
        wget https://github.com/protocolbuffers/protobuf/releases/download/v21.4/protoc-21.4-linux-x86_64.zip
        unzip -d protoc protoc-21.4-linux-x86_64.zip
        echo "${PWD}/protoc/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Compile prod with warnings as errors
      run: MIX_ENV=prod mix compile --warnings-as-errors

    - name: Run tests
      env:
        PROTOBUF_CONFORMANCE_RUNNER: conformance-bin/conformance-test-runner
        LD_LIBRARY_PATH: conformance-bin/.libs
      run: mix coveralls.github --include conformance

    - name: Check formatting
      run: mix format --check-formatted
      if: ${{ matrix.check_format }}

    - name: Check dependencies
      run: mix deps.unlock --check-unused
      if: ${{ matrix.check_deps }}

    - name: Credo
      run: mix credo

    - name: Dialyzer
      run: mix dialyzer
